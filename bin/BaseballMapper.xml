<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 회원정보 처리 SQL -->
<mapper namespace="baseball.dao.BaseballMapper">

<!-- 회원 정보 저장 --> 
<insert id="join" parameterType="users">
insert into users (
	userId
	, password
)
values (
	#{userId}
	, #{password}
)
</insert>

<!-- 아이디 중복 확인 -->
<select id="getId" parameterType="string" resultType="users">
select 
	*
from
	users
where
	userId = #{userId}
</select>

<!-- 로그인시 아이디 패스워드 확인 -->
<select id="getPassword" parameterType="map" resultType="users">
select
	*
from
	users
where
	userId = #{userId}
	and password = #{password}
</select>

<!-- 타자 캐릭터 생성 -->
<insert id="hitterCharacterCreate" parameterType="character">
insert into usercharacter (
	characterId
	, userId
	, characterName
	, className
	, hitterPower
	, hitterHit
	, hitterRunSpeed
	)
	values (
	characteridseq.nextval
	, #{userId}
	, #{characterName}
	, #{className}
	, round(dbms_random.value(0,50))
	, round(dbms_random.value(0,50))
	, round(dbms_random.value(0,50))
	)
</insert>

<!-- 투수 캐릭터 생성 -->
<insert id="pitcherCharacterCreate" parameterType="character">
insert into usercharacter (
	characterId
	, userId
	, characterName
	, className
	, pitcherBallSpeed
	, pitcherBallControl
	, pitcherMentality
	)
	values (
	characteridseq.nextval
	, #{userId}
	, #{characterName}
	, #{className}
	, round(dbms_random.value(0,50))
	, round(dbms_random.value(0,50))
	, round(dbms_random.value(0,50))
	)
</insert>

<!-- 타자 캐릭터 목록 불러오기 -->
<select id="hitterSelect" parameterType="string" resultType="character">
select 
	uct.*
	, (hitterPower + hitterHit + hitterRunSpeed) as allStat
from
	usercharacter uct
where
	userId = #{loginId}
	and className = '타자'
</select>

<!-- 투수 캐릭터 목록 불러오기 -->
<select id="pitcherSelect" parameterType="string" resultType="character">
select 
	uct.*
	, (pitcherBallSpeed + pitcherBallControl + pitcherMentality) as allStat
from
	usercharacter uct
where
	userId = #{loginId}
	and className = '투수'
</select>

<!-- 현재 캐릭터 정보 불러오기 -->
<select id="getCharacter" parameterType="map" resultType="character">
select
	uct.*
	, (pitcherBallSpeed + pitcherBallControl + pitcherMentality) as allStat
from
	usercharacter uct
where
	userId = #{loginId}
	and characterId = #{characterId}
</select>

<!-- 명예의 전당 타자 목록 불러오기 -->
<select id="getHitterHofCharacter" resultType="hof">
select 
	*
from
	hallofframe
where
	className = '타자'
	and allStat >= 200
order by allStat desc
</select>

<!-- 명예의 전당 투수 목록 불러오기 -->
<select id="getPitcherHofCharacter" resultType="hof">
select 
	*
from
	hallofframe
where
	className = '투수'
	and allStat >= 200
order by allStat desc
</select>

<!-- 일반 은퇴 선수 중 타자 목록 불러오기 -->
<select id="getHitterKickCharacter" resultType="hof">
select 
	*
from
	hallofframe
where
	className = '타자'
	and allStat <![CDATA[ < ]]> 200
order by allStat desc
</select>

<!-- 일반 은퇴 선수 중 투수 목록 불러오기 -->
<select id="getPitcherKickCharacter" resultType="hof">
select 
	*
from
	hallofframe
where
	className = '투수'
	and allStat <![CDATA[ < ]]> 200
order by allStat desc
</select>

<!-- 5년차 이후에 은퇴선수 목록으로 이동 -->
<insert id="hofCharacterInsert" parameterType="character">
insert into hallofframe
	values (hallofframeidseq.nextval, #{userId}, #{characterName}, #{allStat}, #{className})
</insert>

<!-- 캐릭터 삭제 -->
<delete id="deleteCharacter" parameterType="map">
delete from usercharacter
where 
	userId = #{userId}
	and characterId = #{characterId}
</delete>

<!-- 일반 휴식 -->
<update id="rest1" parameterType="int">
update usercharacter set health = health + 20, gold = gold - 2000 where characterid = #{characterid} 
</update>

<!-- 고급 휴식 -->
<update id="rest2" parameterType="int">
update usercharacter set health = 100, gold = gold - 4000 where characterid = #{characterid}
</update>

<!-- 경기 -->
<update id="play" parameterType="int">
update usercharacter set health = 100, gold = gold + 3000, active = 5 where characterid = #{characterid}
</update>

<!-- 퀴즈 문제 불러오기 -->
<select id="quiz" resultType="quiz">
select * from (select * from quiz order by dbms_random.value) where rownum  <![CDATA[ <= ]]> 5 
</select>

<!-- 퀴즈 점수 입력 -->
<insert id="quizScoreInsert" parameterType="quizScore">
insert into quizscore values(quizscoreseq.nextval, #{userId}, #{characterId}, #{characterName}, #{correctAnswer}, #{wrongAnswer}, #{correctPercent})
</insert>

<!-- 퀴즈 점수 불러오기 -->
<select id="quizScoreAll" resultType="quizScore">
select * from quizscore
</select>
<select id="quizScoreAll2" parameterType="string" resultType="quizScore">
select * from quizscore
</select>
</mapper>

