<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 회원정보 처리 SQL -->
<mapper namespace="baseball.dao.BaseballMapper">

<!-- 회원 정보 저장 --> 
<insert id="join" parameterType="users">
insert into users (
	userId
	, password
)
values (
	#{userId}
	, #{password}
)
</insert>

<!-- 아이디 중복 확인 -->
<select id="getId" parameterType="string" resultType="users">
select 
	*
from
	users
where
	userId = #{userId}
</select>

<!-- 로그인시 아이디 패스워드 확인 -->
<select id="getPassword" parameterType="map" resultType="users">
select
	*
from
	users
where
	userId = #{userId}
	and password = #{password}
</select>

<!-- 타자 캐릭터 생성 -->
<insert id="hitterCharacterCreate" parameterType="character">
insert into usercharacter (
	characterId
	, userId
	, characterName
	, className
	, hitterPower
	, hitterHit
	, hitterRunSpeed
	)
	values (
	characteridseq.nextval
	, #{userId}
	, #{characterName}
	, #{className}
	, round(dbms_random.value(0,50))
	, round(dbms_random.value(0,50))
	, round(dbms_random.value(0,50))
	)
</insert>

<!-- 투수 캐릭터 생성 -->
<insert id="pitcherCharacterCreate" parameterType="character">
insert into usercharacter (
	characterId
	, userId
	, characterName
	, className
	, pitcherBallSpeed
	, pitcherBallControl
	, pitcherMentality
	)
	values (
	characteridseq.nextval
	, #{userId}
	, #{characterName}
	, #{className}
	, round(dbms_random.value(0,50))
	, round(dbms_random.value(0,50))
	, round(dbms_random.value(0,50))
	)
</insert>

<!-- 타자 캐릭터 목록 불러오기 -->
<select id="hitterSelect" parameterType="string" resultType="character">
select 
	uct.*
	, (hitterPower + hitterHit + hitterRunSpeed) as allStat
from
	usercharacter uct
where
	userId = #{loginId}
	and className = '타자'
</select>

<!-- 투수 캐릭터 목록 불러오기 -->
<select id="pitcherSelect" parameterType="string" resultType="character">
select 
	uct.*
	, (pitcherBallSpeed + pitcherBallControl + pitcherMentality) as allStat
from
	usercharacter uct
where
	userId = #{loginId}
	and className = '투수'
</select>

<select id="gloveSelect" resultType="item">
select * from item
where itemClass = '글러브'
</select>

<select id="clothSelect" resultType="item">
select * from item
where itemClass = '옷'
</select>

<select id="helmetSelect" resultType="item">
select * from item
where itemClass = '헬멧'
</select>

<select id="batSelect" resultType="item">
select * from item
where itemClass = '방망이'
</select>

<select id="shoesSelect" resultType="item">
select * from item
where itemClass = '신발'
</select>

<select id="foodSelect" resultType="item">
select * from item
where itemClass = '소비형 아이템'
</select>

<select id="itemInfo" resultType="itemhaveinfo">
 select 
 	i.itemname, i.itemclass ,i.summary
 from 
 	item i, itemequiphaveinfo iqhi 
 where 
 	i.itemid=iqhi.itemid
</select>

<insert id="itemehaveInfo" parameterType="itemhaveinfo">
insert into itemhaveinfo (
	characterid,
	itemid,
	quantity
	)
	values(
	#{characterid},
	#{itemid},
	#{quantity}
	)
</insert>

<insert id="test" parameterType="itemequiphaveInfo">
insert into itemequiphaveinfo(
	characterid,
	itemid
	)
	values(
	#{characterid},
	#{itemid}
	)
</insert>

<delete id="testVoDelete">
delete from itemequiphaveinfo
where characterid=#{characterid} and itemid=#{itemid}
</delete>


<select id="itemequiphaveInfo" resultType="itemhaveinfo">
select 
   i.itemname, i.price, i.summary, count(ihi.quantity) as quantity, ihi.itemid
from 
   item i, itemhaveinfo ihi, usercharacter uc
where 
   i.itemid=ihi.itemid and ihi.characterid=uc.characterid
   
group by i.itemname, i.price, i.summary, ihi.itemid
</select>

<update id="goldUpdate" parameterType="character">
update 
	usercharacter 
set 
	gold = #{gold}
where 
	characterId=#{characterId}
</update>

<update id="purchaseCloth" parameterType="character">
update 
	usercharacter 
set 
	pitcherMentality=#{pitcherMentality}
where 
	characterId=#{characterId}
</update>

<update id="purchaseHelmet" parameterType="character">
update 
	usercharacter 
set 
	pitcherBallSpeed=#{pitcherBallSpeed}
where 
	characterId=#{characterId}
</update>

<update id="purchaseShoes" parameterType="int">
update 
	usercharacter 
set 
	hitterRunSpeed = #{hitterRunSpeed}
where 
	characterId=#{characterId}
</update>

<update id="purchaseGlove" parameterType="int">
update usercharacter 
set pitcherBallControl = #{pitcherBallControl}
where characterId=#{characterId}
</update>

<update id="addQuantity" parameterType="int">
update 
	itemhaveinfo 
set 	
	quantity=quantity + 1 
where 
	itemid = #{itemid} and characterid = #{characterid}
</update>

<select id="itemEquipHaveHemletInfo" resultType="itemhaveinfo">
 select 
 	i.itemname, i.price, i.summary,count(ihi.quantity) as quantity,ihi.itemid
 from 
 	itemhaveinfo ihi, item i
where 
	i.itemClass = '헬멧' and ihi.itemid=i.itemid 
group by 
	i.itemname, i.price, i.summary,ihi.itemid
order by
	price
</select>

<select id="itemEquipHaveUniformInfo" resultType="itemhaveinfo">
 select 
 	i.itemname, i.price, i.summary,count(ihi.quantity) as quantity ,ihi.itemid
 from 
 	itemhaveinfo ihi, item i
where 
	i.itemClass = '옷' and ihi.itemid=i.itemid 
group by 
	i.itemname, i.price, i.summary,ihi.itemid
order by
	price
</select>

<select id="itemEquipHaveShoesInfo" resultType="itemhaveinfo">
 select 
 	i.itemname, i.price, i.summary,count(ihi.quantity) as quantity ,ihi.itemid
 from 
 	itemhaveinfo ihi, item i
where 
	i.itemClass = '신발' and ihi.itemid=i.itemid 
group by 
	i.itemname, i.price, i.summary,ihi.itemid
order by
	price
</select>

<!-- 현재 캐릭터 정보 불러오기 -->
<select id="getCharacter" parameterType="map" resultType="character">
select
	uct.*
	, (pitcherBallSpeed + pitcherBallControl + pitcherMentality) as allStat
from
	usercharacter uct
where
	userId = #{loginId}
	and characterId = #{characterId}
>>>>>>> refs/remotes/origin/jeonjungyu
</select>

<!-- 명예의 전당 타자 목록 불러오기 -->
<select id="getHitterHofCharacter" resultType="hof">
select 
	*
from
	hallofframe
where
	className = '타자'
	and allStat >= 200
order by allStat desc
</select>

<!-- 명예의 전당 투수 목록 불러오기 -->
<select id="getPitcherHofCharacter" resultType="hof">
select 
	*
from
	hallofframe
where
	className = '투수'
	and allStat >= 200
order by allStat desc
</select>

<!-- 일반 은퇴 선수 중 타자 목록 불러오기 -->
<select id="getHitterKickCharacter" resultType="hof">
select 
	*
from
	hallofframe
where
	className = '타자'
	and allStat <![CDATA[ < ]]> 200
order by allStat desc
</select>

<!-- 일반 은퇴 선수 중 투수 목록 불러오기 -->
<select id="getPitcherKickCharacter" resultType="hof">
select 
	*
from
	hallofframe
where
	className = '투수'
	and allStat <![CDATA[ < ]]> 200
order by allStat desc
</select>

<!-- 5년차 이후에 은퇴선수 목록으로 이동 -->
<insert id="hofCharacterInsert" parameterType="character">
insert into hallofframe
	values (hallofframeidseq.nextval, #{userId}, #{characterName}, #{allStat}, #{className})
</insert>

<!-- 선수 삭제 -->
<delete id="deleteCharacter" parameterType="map">
delete from usercharacter
where 
	userId = #{userId}
	and characterId = #{characterId}
</delete>

<!-- 일반 휴식 -->
<update id="rest1" parameterType="int">
update usercharacter 
set 
	health = health + 20
	, gold = gold - 2000 
where 
	characterid = #{characterid} 
</update>

<!-- 고급 휴식 -->
<update id="rest2" parameterType="int">
update usercharacter 
	set health = 100
	, gold = gold - 4000 
where 
	characterid = #{characterid}
</update>

<!-- 경기 -->
<update id="play" parameterType="int">
update usercharacter 
	set health = 100
	, gold = gold + 3000
	, active = 5 
where 
	characterid = #{characterid}
</update>

<!-- 퀴즈 문제 불러오기 -->
<select id="quiz" resultType="quiz">
select 
	* 
from 
	(select * from quiz order by dbms_random.value) 
where 
	rownum  <![CDATA[ <= ]]> 5 
</select>

<!-- 퀴즈 점수 입력 -->
<insert id="quizScoreInsert" parameterType="quizScore">
insert into quizscore values(quizscoreseq.nextval, #{userId}, #{characterId}, #{characterName}, #{correctAnswer}, #{wrongAnswer}, #{correctPercent})
</insert>

<!-- 퀴즈 점수 불러오기 -->
<select id="quizScoreAll" resultType="quizScore">
select 
	* 
from 
	quizscore 
order by 
	quizscorenumber
</select>
<!-- 퀴즈 점수 10개씩 불러오기 -->
<select id="quizScoreAll2" parameterType="string" resultType="quizScore">
select 
	* 
from 
	quizscore 
order by 
	quizscorenumber
</select>

<!-- 퀴즈 정답률 순위 불러오기 -->
<select id="quizRanking" resultType="quizScore">
select 
	userId, characterName, avg(correctPercent) as correctPercent 
from 
	quizscore 
group by 
	characterName, userId 
order by 
	correctPercent desc
</select>

<!-- 투수 랭킹 목록 불러오기 -->
<select id="pitcherRanking" resultType="character">
select
	uc.*
	, (pitcherBallSpeed + pitcherBallControl + pitcherMentality) as allStat
from
	usercharacter uc
where 
	className = '투수'
order by
	allStat desc
</select>

<!-- 타자 랭킹 목록 불러오기 -->
<select id="hitterRanking" resultType="character">
select
	uc.*
	, (hitterPower + hitterHit + hitterRunSpeed) as allStat
from
	usercharacter uc
where 
	className = '타자'
order by
	allStat desc
</select>

<!-- 아이디 목록 불러오기 -->
<select id="getUser" resultType="users">
select
	userId
from
	users
</select>

<!-- 아이디 삭제하기 -->
<delete id="deleteId" parameterType="string">
delete from users
where
	userId = #{userId}
</delete>

<!-- 경기, 휴식 캐릭터 정보 업데이트 -->
<update id="matchRestUpdate" parameterType="character">
update usercharacter
set
	health = #{health}
	, active = #{active}
	, gold = #{gold}
	, year = #{year}
where
	userId = #{userId}
	and characterId = #{characterId}	
</update>


</mapper>

